class Solution {
public:
   bool isSafe(int row,int col, vector<vector<char>>&board, char num){
     int rowsize=board.size();
     int colsize=board[0].size();
     //checking for horizontal 
     for(int i=0;i<rowsize;i++){
        if(board[row][i]==num){
            return false;
        }
     }
    //checking for vertical
    for(int i=0;i<colsize;i++){
        if(board[i][col]==num){
            return false;
        }

    }
    //checking in 3*3 matrix
     int startrow=row-row%3;
     int startcol=col-col%3;
     for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(board[startrow+i][startcol+j]==num){
                return false;
            }
        }
     }
     return true;
   }
 bool sudoku(vector<vector<char>>&board){
    int row=board.size();
        int col=board[0].size();
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(board[i][j]=='.'){
                    for(char c='1';c<='9';c++){
                    if(isSafe(i,j,board,c)){
                        board[i][j]=c;
                    
                    if(sudoku(board)){
                        return true;
                    }
                    board[i][j]='.';
                }
                    }
                return false;
            }
            }
        }
        return true;
 }
    void solveSudoku(vector<vector<char>>& board) {
        sudoku(board);
    }
}; 
